package ge.join2play.join2playback.service;

import ge.join2play.join2playback.config.EventTableConfig;
import ge.join2play.join2playback.config.FilterConfig;
import ge.join2play.join2playback.model.*;
import ge.join2play.join2playback.model.enums.SportType;
import ge.join2play.join2playback.repository.EventParticipantsRepository;
import ge.join2play.join2playback.repository.EventRepository;
import ge.join2play.join2playback.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class ApplicationServiceTests {
    private EventRepository eventRepository;
    private UserRepository userRepository;
    private EventParticipantsRepository eventParticipantsRepository;
    private ApplicationService applicationService;
    private final UUID hostId = UUID.fromString("3d6005f9-f84d-43fa-a9f5-e15b51cdbe56");

    @BeforeEach
    void setUp() {
        eventRepository = mock(EventRepository.class);
        userRepository = mock(UserRepository.class);
        eventParticipantsRepository = mock(EventParticipantsRepository.class);
        FilterConfig filterConfig = mock(FilterConfig.class);
        EventTableConfig eventTableConfig = mock(EventTableConfig.class);
        applicationService = new ApplicationService(eventRepository, userRepository, eventParticipantsRepository, filterConfig, eventTableConfig);
    }

    @Test
    public void testConvertEventRequestToEvent() {
        EventRequest eventRequest = new EventRequest(
                hostId,
                18,
                25,
                "Football Match",
                Instant.parse("2025-04-16T10:15:30.00Z").toEpochMilli(),
                41.725788,
                44.727753,
                "Location 1",
                10,
                6,
                "Football"
        );

        Event event = applicationService.convertEventRequestToEvent(eventRequest);

        assertNotNull(event.getId(), "Event ID should be autogenerated.");
        assertEquals(hostId, event.getHostId());
        assertEquals(18, event.getMinAge());
        assertEquals(25, event.getMaxAge());
        assertEquals(eventRequest.getDescription(), event.getDescription());
        assertEquals(eventRequest.getEventTime(), event.getEventTime().toEpochMilli());
        assertEquals(eventRequest.getLatitude(), event.getLatitude());
        assertEquals(eventRequest.getLongitude(), event.getLongitude());
        assertEquals(eventRequest.getLocation(), event.getLocation());
        assertEquals(eventRequest.getNumberOfParticipantsTotal(), event.getNumberOfParticipantsTotal());
        assertEquals(eventRequest.getNumberOfParticipantsRegistered(), event.getNumberOfParticipantsRegistered());
        assertEquals(eventRequest.getSportType(), event.getSportType().toString());
    }

    @Test
    public void testConvertEventToEventResponse() {
        User user = new User(
                hostId,
                "Jane Doe",
                "j.doe@gmail.com",
                "+999",
                Timestamp.valueOf("2000-04-16").getTime(),
                "I love sport",
                "secure_passworD"
        );

        when(userRepository.getById(any(UUID.class))).thenReturn(Optional.of(user));

        Event event = new Event(
                UUID.randomUUID(),
                hostId,
                18,
                25,
                "Football Match",
                Instant.parse("2025-04-16T10:15:30.00Z"),
                41.725788,
                44.727753,
                "Location",
                10,
                6,
                SportType.FOOTBALL
        );

        EventResponse eventResponse = applicationService.convertEventToEventResponse(event);

        assertEquals(event.getId(), eventResponse.getEventId());
        assertEquals(hostId, eventResponse.getHostId());
        assertEquals(event.getMinAge()+"-"+event.getMaxAge(), eventResponse.getAgeRange());
        assertEquals(event.getDescription(), eventResponse.getDescription());
        assertEquals(event.getEventTime().toEpochMilli(), eventResponse.getEventTime());
        assertEquals(event.getLatitude(), eventResponse.getLatitude());
        assertEquals(event.getLongitude(), eventResponse.getLongitude());
        assertEquals(event.getLocation(), eventResponse.getLocation());
        assertEquals(event.getNumberOfParticipantsTotal(), eventResponse.getNumberOfParticipantsTotal());
        assertEquals(event.getNumberOfParticipantsRegistered(), eventResponse.getNumberOfParticipantsRegistered());
        assertEquals(event.getSportType().toString(), eventResponse.getSportType());
    }

    @Test
    public void testCreateEvent() {
        User user = new User(
                hostId,
                "Jane Doe",
                "j.doe@gmail.com",
                "+999",
                Timestamp.valueOf("2000-04-16").getTime(),
                "I love sport",
                "secure_passworD"
        );

        when(userRepository.getById(any(UUID.class))).thenReturn(Optional.of(user));

        EventRequest eventRequest = new EventRequest(
                hostId,
                18,
                25,
                "Football Match",
                Instant.parse("2025-04-16T10:15:30.00Z").toEpochMilli(),
                41.725788,
                44.727753,
                "Tbilisi",
                10,
                7,
                "Football"
        );
        Event event = applicationService.convertEventRequestToEvent(eventRequest);

        when(eventRepository.save(any(Event.class))).thenReturn(event);

        EventResponse eventResponse = applicationService.createEvent(eventRequest);

        assertNotNull(eventResponse);
        assertEquals(event.getId(), eventResponse.getEventId());
        assertEquals(eventRequest.getHostId(), eventResponse.getHostId());
        assertEquals(eventRequest.getMinAge() + "-" + eventRequest.getMaxAge(), eventResponse.getAgeRange());
        assertEquals(eventRequest.getDescription(), eventResponse.getDescription());
        assertEquals(eventRequest.getEventTime(), eventResponse.getEventTime());
        assertEquals(eventRequest.getLatitude(), eventResponse.getLatitude());
        assertEquals(eventRequest.getLongitude(), eventResponse.getLongitude());
        assertEquals(eventRequest.getLocation(), eventResponse.getLocation());
        assertEquals(eventRequest.getNumberOfParticipantsTotal(), eventResponse.getNumberOfParticipantsTotal());
        assertEquals(eventRequest.getNumberOfParticipantsRegistered(), eventResponse.getNumberOfParticipantsRegistered());
        assertEquals(eventRequest.getSportType(), eventResponse.getSportType());

        verify(eventRepository, times(1)).save(any(Event.class));
    }

    @Test
    public void testGetEvent() {
        User user = new User(
                hostId,
                "Jane Doe",
                "j.doe@gmail.com",
                "+999",
                Timestamp.valueOf("2000-04-16").getTime(),
                "I love sport",
                "secure_passworD"
        );

        when(userRepository.getById(any(UUID.class))).thenReturn(Optional.of(user));

        UUID eventId = UUID.randomUUID();
        Event event = new Event(
                eventId,
                hostId,
                18,
                25,
                "Football Match",
                Instant.parse("2025-04-16T10:15:30.00Z"),
                41.725788,
                44.727753,
                "Location",
                10,
                5,
                SportType.FOOTBALL
        );

        when(eventRepository.getById(eventId)).thenReturn(event);

        EventResponse eventResponse = applicationService.getEvent(eventId);

        assertNotNull(eventResponse);
        assertEquals(event.getHostId(), eventResponse.getHostId());
        assertEquals(event.getMinAge()+"-"+event.getMaxAge(), eventResponse.getAgeRange());
        assertEquals(event.getDescription(), eventResponse.getDescription());
        assertEquals(event.getEventTime().toEpochMilli(), eventResponse.getEventTime());
        assertEquals(event.getLatitude(), eventResponse.getLatitude());
        assertEquals(event.getLongitude(), eventResponse.getLongitude());
        assertEquals(event.getLocation(), eventResponse.getLocation());
        assertEquals(event.getNumberOfParticipantsTotal(), eventResponse.getNumberOfParticipantsTotal());
        assertEquals(event.getNumberOfParticipantsRegistered(), eventResponse.getNumberOfParticipantsRegistered());
        assertEquals(event.getSportType().toString(), eventResponse.getSportType());
        verify(eventRepository, times(1)).getById(eventId);
    }

    @Test
    public void testUpdateEvent() {
        User user = new User(
                hostId,
                "Jane Doe",
                "j.doe@gmail.com",
                "+999",
                Timestamp.valueOf("2000-04-16").getTime(),
                "I love sport",
                "secure_passworD"
        );

        when(userRepository.getById(any(UUID.class))).thenReturn(Optional.of(user));

        UUID eventId = UUID.randomUUID();
        EventRequest eventRequest = new EventRequest(
                hostId,
                20,
                30,
                "Updated Football Match",
                Instant.parse("2025-05-16T10:15:30.00Z").toEpochMilli(),
                41.725788,
                44.727753,
                "Tbilisi",
                20,
                14,
                "Football"
        );
        Event updatedEvent = applicationService.convertEventRequestToEvent(eventRequest);

        when(eventRepository.update(any(Event.class))).thenReturn(updatedEvent);

        EventResponse eventResponse = applicationService.updateEvent(eventRequest, eventId);

        assertNotNull(eventResponse);
        assertEquals(updatedEvent.getId(), eventResponse.getEventId());
        assertEquals(updatedEvent.getHostId(), eventResponse.getHostId());
        assertEquals(eventRequest.getDescription(), eventResponse.getDescription());
        assertEquals(eventRequest.getEventTime(), eventResponse.getEventTime());
        assertEquals(eventRequest.getLatitude(), eventResponse.getLatitude());
        assertEquals(eventRequest.getLongitude(), eventResponse.getLongitude());
        assertEquals(eventRequest.getLocation(), eventResponse.getLocation());
        assertEquals(eventRequest.getNumberOfParticipantsTotal(), eventResponse.getNumberOfParticipantsTotal());
        assertEquals(eventRequest.getNumberOfParticipantsRegistered(), eventResponse.getNumberOfParticipantsRegistered());
        assertEquals(eventRequest.getSportType(), eventResponse.getSportType());
        verify(eventRepository, times(1)).update(any(Event.class));
    }

    @Test
    public void testGetAllEvents() {
        User user = new User(
                hostId,
                "Jane Doe",
                "j.doe@gmail.com",
                "+999",
                Timestamp.valueOf("2000-04-16").getTime(),
                "I love sport",
                "secure_passworD"
        );

        when(userRepository.getById(any(UUID.class))).thenReturn(Optional.of(user));

        List<Event> events = new ArrayList<>();
        events.add(new Event(
                UUID.randomUUID(),
                hostId,
                18,
                25,
                "Football Match",
                Instant.parse("2025-04-16T10:15:30.00Z"),
                41.725788,
                44.727753,
                "Location",
                10,
                4,
                SportType.FOOTBALL
        ));
        events.add(new Event(
                UUID.randomUUID(),
                hostId,
                20,
                30,
                "Basketball Game",
                Instant.parse("2025-05-16T18:00:00.00Z"),
                40.123456,
                43.654321,
                "Location 2",
                15,
                7,
                SportType.BASKETBALL
        ));

        when(eventRepository.getAll()).thenReturn(events);

        List<EventResponse> eventResponses = applicationService.getAllEvents();

        assertEquals(2, eventResponses.size());
        assertEquals(events.get(0).getId(), eventResponses.get(0).getEventId());
        assertEquals(events.get(1).getId(), eventResponses.get(1).getEventId());
        assertEquals(events.get(0).getHostId(), eventResponses.get(0).getHostId());
        assertEquals(events.get(1).getHostId(), eventResponses.get(1).getHostId());
        assertEquals(events.get(0).getMinAge()+"-"+events.get(0).getMaxAge(), eventResponses.get(0).getAgeRange());
        assertEquals(events.get(0).getDescription(), eventResponses.get(0).getDescription());
        assertEquals(events.getFirst().getEventTime().toEpochMilli(), eventResponses.getFirst().getEventTime());
        assertEquals(events.getFirst().getLatitude(), eventResponses.getFirst().getLatitude());
        assertEquals(events.getFirst().getLongitude(), eventResponses.getFirst().getLongitude());
        assertEquals(events.getFirst().getLocation(), eventResponses.getFirst().getLocation());
        assertEquals(events.getFirst().getNumberOfParticipantsTotal(), eventResponses.getFirst().getNumberOfParticipantsTotal());
        assertEquals(events.get(0).getNumberOfParticipantsRegistered(), eventResponses.get(0).getNumberOfParticipantsRegistered());
        assertEquals(events.get(0).getSportType().toString(), eventResponses.get(0).getSportType());
        assertEquals(events.get(1).getMinAge()+"-"+events.get(1).getMaxAge(), eventResponses.get(1).getAgeRange());
        assertEquals(events.get(1).getDescription(), eventResponses.get(1).getDescription());
        assertEquals(events.get(1).getEventTime().toEpochMilli(), eventResponses.get(1).getEventTime());
        assertEquals(events.get(1).getLatitude(), eventResponses.get(1).getLatitude());
        assertEquals(events.get(1).getLongitude(), eventResponses.get(1).getLongitude());
        assertEquals(events.get(1).getLocation(), eventResponses.get(1).getLocation());
        assertEquals(events.get(1).getNumberOfParticipantsTotal(), eventResponses.get(1).getNumberOfParticipantsTotal());
        assertEquals(events.get(1).getNumberOfParticipantsRegistered(), eventResponses.get(1).getNumberOfParticipantsRegistered());
        assertEquals(events.get(1).getSportType().toString(), eventResponses.get(1).getSportType());
        verify(eventRepository, times(1)).getAll();
    }
}