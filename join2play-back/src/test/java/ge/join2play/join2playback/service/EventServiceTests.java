package ge.join2play.join2playback.service;

import ge.join2play.join2playback.model.Event;
import ge.join2play.join2playback.model.EventRequest;
import ge.join2play.join2playback.model.EventResponse;
import ge.join2play.join2playback.repository.EventRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class EventServiceTests {
    private EventRepository eventRepository;
    private EventService eventService;

    @BeforeEach
    void setUp() {
        eventRepository = mock(EventRepository.class);
        eventService = new EventService(eventRepository);
    }

    @Test
    public void testConvertEventRequestToEvent() {
        EventRequest eventRequest = new EventRequest(
                "18-25",
                "Football Match",
                Instant.parse("2025-04-16T10:15:30.00Z").toEpochMilli(),
                41.725788,
                44.727753,
                10,
                "Football"
        );

        Event event = eventService.convertEventRequestToEvent(eventRequest);

        assertNotNull(event.getId(), "Event ID should be autogenerated.");
        assertEquals(18, event.getMinAge());
        assertEquals(25, event.getMaxAge());
        assertEquals(eventRequest.getDescription(), event.getDescription());
        assertEquals(eventRequest.getEventTime(), event.getEventTime().toEpochMilli());
        assertEquals(eventRequest.getLatitude(), event.getLatitude());
        assertEquals(eventRequest.getLongitude(), event.getLongitude());
        assertEquals(eventRequest.getNumberOfParticipants(), event.getNumberOfParticipants());
        assertEquals(eventRequest.getSportType(), event.getSportType());
    }

    @Test
    public void testConvertEventToEventResponse() {
        Event event = new Event(
                UUID.randomUUID(),
                18,
                25,
                "Football Match",
                Instant.parse("2025-04-16T10:15:30.00Z"),
                41.725788,
                44.727753,
                10,
                "Football"
        );

        EventResponse eventResponse = eventService.convertEventToEventResponse(event);

        assertEquals(event.getId(), eventResponse.getEventId());
        assertEquals(event.getMinAge()+"-"+event.getMaxAge(), eventResponse.getAgeRange());
        assertEquals(event.getDescription(), eventResponse.getDescription());
        assertEquals(event.getEventTime().toEpochMilli(), eventResponse.getEventTime());
        assertEquals(event.getLatitude(), eventResponse.getLatitude());
        assertEquals(event.getLongitude(), eventResponse.getLongitude());
        assertEquals(event.getNumberOfParticipants(), eventResponse.getNumberOfParticipants());
        assertEquals(event.getSportType(), eventResponse.getSportType());
    }

    @Test
    public void testCreateEvent() {
        EventRequest eventRequest = new EventRequest(
                "18-25",
                "Football Match",
                Instant.parse("2025-04-16T10:15:30.00Z").toEpochMilli(),
                41.725788,
                44.727753,
                10,
                "Football"
        );
        Event event = eventService.convertEventRequestToEvent(eventRequest);

        when(eventRepository.save(any(Event.class))).thenReturn(event);

        EventResponse eventResponse = eventService.createEvent(eventRequest);

        assertNotNull(eventResponse);
        assertEquals(event.getId(), eventResponse.getEventId());
        assertEquals(eventRequest.getAgeRange(), eventResponse.getAgeRange());
        assertEquals(eventRequest.getDescription(), eventResponse.getDescription());
        assertEquals(eventRequest.getEventTime(), eventResponse.getEventTime());
        assertEquals(eventRequest.getLatitude(), eventResponse.getLatitude());
        assertEquals(eventRequest.getLongitude(), eventResponse.getLongitude());
        assertEquals(eventRequest.getNumberOfParticipants(), eventResponse.getNumberOfParticipants());
        assertEquals(eventRequest.getSportType(), eventResponse.getSportType());

        verify(eventRepository, times(1)).save(any(Event.class));
    }

    @Test
    public void testGetEvent() {
        UUID eventId = UUID.randomUUID();
        Event event = new Event(
                eventId,
                18,
                25,
                "Football Match",
                Instant.parse("2025-04-16T10:15:30.00Z"),
                41.725788,
                44.727753,
                10,
                "Football"
        );

        when(eventRepository.getById(eventId)).thenReturn(event);

        EventResponse eventResponse = eventService.getEvent(eventId);

        assertNotNull(eventResponse);
        assertEquals(event.getMinAge()+"-"+event.getMaxAge(), eventResponse.getAgeRange());
        assertEquals(event.getDescription(), eventResponse.getDescription());
        assertEquals(event.getEventTime().toEpochMilli(), eventResponse.getEventTime());
        assertEquals(event.getLatitude(), eventResponse.getLatitude());
        assertEquals(event.getLongitude(), eventResponse.getLongitude());
        assertEquals(event.getNumberOfParticipants(), eventResponse.getNumberOfParticipants());
        assertEquals(event.getSportType(), eventResponse.getSportType());
        verify(eventRepository, times(1)).getById(eventId);
    }

    @Test
    public void testUpdateEvent() {
        UUID eventId = UUID.randomUUID();
        EventRequest eventRequest = new EventRequest(
                "20-30",
                "Updated Football Match",
                Instant.parse("2025-05-16T10:15:30.00Z").toEpochMilli(),
                41.725788,
                44.727753,
                20,
                "Football"
        );
        Event updatedEvent = eventService.convertEventRequestToEvent(eventRequest);

        when(eventRepository.update(any(Event.class))).thenReturn(updatedEvent);

        EventResponse eventResponse = eventService.updateEvent(eventRequest, eventId);

        assertNotNull(eventResponse);
        assertEquals(updatedEvent.getId(), eventResponse.getEventId());
        assertEquals(eventRequest.getAgeRange(), eventResponse.getAgeRange());
        assertEquals(eventRequest.getDescription(), eventResponse.getDescription());
        assertEquals(eventRequest.getEventTime(), eventResponse.getEventTime());
        assertEquals(eventRequest.getLatitude(), eventResponse.getLatitude());
        assertEquals(eventRequest.getLongitude(), eventResponse.getLongitude());
        assertEquals(eventRequest.getNumberOfParticipants(), eventResponse.getNumberOfParticipants());
        assertEquals(eventRequest.getSportType(), eventResponse.getSportType());
        verify(eventRepository, times(1)).update(any(Event.class));
    }

    @Test
    public void testGetAllEvents() {
        List<Event> events = new ArrayList<>();
        events.add(new Event(
                UUID.randomUUID(),
                18,
                25,
                "Football Match",
                Instant.parse("2025-04-16T10:15:30.00Z"),
                41.725788,
                44.727753,
                10,
                "Football"
        ));
        events.add(new Event(
                UUID.randomUUID(),
                20,
                30,
                "Basketball Game",
                Instant.parse("2025-05-16T18:00:00.00Z"),
                40.123456,
                43.654321,
                15,
                "Basketball"
        ));

        when(eventRepository.getAll()).thenReturn(events);

        List<EventResponse> eventResponses = eventService.getAllEvents();

        assertEquals(2, eventResponses.size());
        assertEquals(events.get(0).getId(), eventResponses.get(0).getEventId());
        assertEquals(events.get(1).getId(), eventResponses.get(1).getEventId());
        assertEquals(events.get(0).getMinAge()+"-"+events.get(0).getMaxAge(), eventResponses.get(0).getAgeRange());
        assertEquals(events.get(0).getDescription(), eventResponses.get(0).getDescription());
        assertEquals(events.get(0).getEventTime().toEpochMilli(), eventResponses.get(0).getEventTime());
        assertEquals(events.get(0).getLatitude(), eventResponses.get(0).getLatitude());
        assertEquals(events.get(0).getLongitude(), eventResponses.get(0).getLongitude());
        assertEquals(events.get(0).getNumberOfParticipants(), eventResponses.get(0).getNumberOfParticipants());
        assertEquals(events.get(0).getSportType(), eventResponses.get(0).getSportType());
        assertEquals(events.get(1).getMinAge()+"-"+events.get(1).getMaxAge(), eventResponses.get(1).getAgeRange());
        assertEquals(events.get(1).getDescription(), eventResponses.get(1).getDescription());
        assertEquals(events.get(1).getEventTime().toEpochMilli(), eventResponses.get(1).getEventTime());
        assertEquals(events.get(1).getLatitude(), eventResponses.get(1).getLatitude());
        assertEquals(events.get(1).getLongitude(), eventResponses.get(1).getLongitude());
        assertEquals(events.get(1).getNumberOfParticipants(), eventResponses.get(1).getNumberOfParticipants());
        assertEquals(events.get(1).getSportType(), eventResponses.get(1).getSportType());
        verify(eventRepository, times(1)).getAll();
    }
}